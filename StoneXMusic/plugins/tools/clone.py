import logging
import os

from pyrogram import Client, filters
from pyrogram.errors.exceptions.bad_request_400 import (
    AccessTokenExpired,
    AccessTokenInvalid,
)

from config import API_HASH, API_ID, LOGGER_ID
from ChampuXMusic import app
from ChampuXMusic.misc import SUDOERS
from ChampuXMusic.utils.database import clonebotdb, get_assistant

CLONES = set()


@app.on_message(filters.command(["clone", "host", "deploy"]) & SUDOERS)
async def clone_txt(client, message):
    userbot = await get_assistant(LOGGER_ID)
    if len(message.command) > 1:
        bot_token = message.text.split("/clone", 1)[1].strip()
        mi = await message.reply_text("·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ·¥° ú…™ ü·¥á …™ ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.")
        try:
            ai = Client(
                bot_token,
                API_ID,
                API_HASH,
                bot_token=bot_token,
                plugins=dict(root="ChampuXMusic.cplugin"),
            )
            await ai.start()
            bot = await ai.get_me()
            bot_users = await ai.get_users(bot.username)
            bot_id = bot_users.id

        except (AccessTokenExpired, AccessTokenInvalid):
            await mi.edit_text(
                "** è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥. ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.**"
            )
            return

        except Exception as e:
            cloned_bot = await clonebotdb.find_one({"token": bot_token})
            if cloned_bot:
                await mi.edit_text("**ü§ñ  è·¥è·¥ú Ä  ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ ü·¥è…¥·¥á·¥Ö ‚úÖ**")
                return

        # Proceed with the cloning process
        await mi.edit_text(
            "**·¥Ñ ü·¥è…¥…™…¥…¢ ·¥ò Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ “ì·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  ô·¥á s·¥õ·¥Ä Ä·¥õ.**"
        )
        try:

            await app.send_message(
                LOGGER_ID, f"**#New_Clones**\n\n** ô·¥è·¥õ:- @{bot.username}**"
            )
            await userbot.send_message(bot.username, f"/start")

            details = {
                "bot_id": bot.id,
                "is_bot": True,
                "user_id": message.from_user.id,
                "name": bot.first_name,
                "token": bot_token,
                "username": bot.username,
            }
            clonebotdb.insert_one(details)
            CLONES.add(bot.id)
            await mi.edit_text(
                f"** ô·¥è·¥õ @{bot.username} h·¥Äs  ô·¥á·¥á…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ü·¥è…¥·¥á·¥Ö ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ‚úÖ.**\n** Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô è :- /delclone**"
            )
        except BaseException as e:
            logging.exception("**·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á ·¥Ñ ü·¥è…¥…™…¥…¢  ô·¥è·¥õ.**")
            await mi.edit_text(
                f"‚ö†Ô∏è <b>·¥á Ä Ä·¥è Ä:</b>\n\n<code>{e}</code>\n\n**·¥ã…™…¥·¥Ö ü è “ì·¥è·¥°·¥Ä Ä·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è @vk_zone ·¥õ·¥è …¢·¥á·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥Ñ·¥á**"
            )
    else:
        await message.reply_text(
            "**…¢…™·¥†·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥Ä“ì·¥õ·¥á Ä /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì Ä·¥è·¥ç @Botfather.**"
        )


@app.on_message(
    filters.command(
        [
            "deletecloned",
            "delcloned",
            "delclone",
            "deleteclone",
            "removeclone",
            "cancelclone",
        ]
    )
)
async def delete_cloned_bot(client, message):
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "**‚ö†Ô∏è ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥Ä“ì·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**"
            )
            return

        bot_token = " ".join(message.command[1:])
        ok = await message.reply_text("**·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥...**")

        cloned_bot = await clonebotdb.find_one({"token": bot_token})
        if cloned_bot:
            clonebotdb.delete_one({"token": bot_token})
            CLONES.remove(cloned_bot["bot_id"])
            await ok.edit_text(
                "**ü§ñ  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ç è s·¥á Ä·¥†·¥á Ä ‚ò†Ô∏è**\n**·¥Ñ ü·¥è…¥·¥á  ô è :- /clone**"
            )
            os.system(f"pkill -9 python3 && bash start")

        else:
            await message.reply_text(
                "**‚ö†Ô∏è ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ …™s …¥·¥è·¥õ …™…¥ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ü…™s·¥õ.**"
            )
    except Exception as e:
        await message.reply_text(
            f"**·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ:** {e}"
        )
        logging.exception(e)


async def restart_bots():
    global CLONES
    try:
        logging.info("Restarting all cloned bots........")
        bots = clonebotdb.find()
        async for bot in bots:
            bot_token = bot["token"]
            ai = Client(
                f"{bot_token}",
                API_ID,
                API_HASH,
                bot_token=bot_token,
                plugins=dict(root="ChampuXMusic.cplugin"),
            )
            await ai.start()
            bot = await ai.get_me()
            if bot.id not in CLONES:
                try:
                    CLONES.add(bot.id)
                except Exception:
                    pass
    except Exception as e:
        logging.exception("Error while restarting bots.")


@app.on_message(filters.command("cloned") & SUDOERS)
async def list_cloned_bots(client, message):
    try:
        cloned_bots = clonebotdb.find()
        cloned_bots_list = await cloned_bots.to_list(length=None)

        if not cloned_bots_list:
            await message.reply_text("…¥·¥è  ô·¥è·¥õs  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ñ ü·¥è…¥·¥á·¥Ö  è·¥á·¥õ.")
            return

        total_clones = len(cloned_bots_list)
        text = f"**·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs:** {total_clones}\n\n"

        for bot in cloned_bots_list:
            text += f"** ô·¥è·¥õ …™·¥Ö:** `{bot['bot_id']}`\n"
            text += f"** ô·¥è·¥õ …¥·¥Ä·¥ç·¥á:** {bot['name']}\n"
            text += f"** ô·¥è·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{bot['username']}\n\n"

        await message.reply_text(text)
    except Exception as e:
        logging.exception(e)
        await message.reply_text("**·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  ü…™s·¥õ…™…¥…¢ ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs.**")


@app.on_message(filters.command("delallclone") & SUDOERS)
async def delete_all_cloned_bots(client, message):
    try:
        a = await message.reply_text("**·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs...**")
        await clonebotdb.delete_many({})
        CLONES.clear()

        await a.edit_text("**·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ‚úÖ**")
    except Exception as e:
        await a.edit_text(f"**·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs.** {e}")
        logging.exception(e)
